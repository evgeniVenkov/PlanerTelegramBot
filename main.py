import os
import logging
import asyncio
from aiogram import Bot, Dispatcher,Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv
from triger import Pauk
import pandas as pd
from Data_base import command_add,command_search
from client import client
from promt import get_—Åhat



# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("TOKEN")


# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (—á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –æ—à–∏–±–∫–∏ –∏ —Å–æ–±—ã—Ç–∏—è)
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
@router.callback_query(F.data.startswith("edit_"))
async def edit_task(callback: CallbackQuery):
    task_name = callback.data.split("_", 1)[1]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    await callback.message.answer(f"‚úèÔ∏è –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: {task_name}")
    await callback.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å"
@router.callback_query(F.data.startswith("delete_"))
async def delete_task(callback: CallbackQuery):
    task_name = callback.data.split("_", 1)[1]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π
    await callback.message.answer(f"üóë –ó–∞–¥–∞—á–∞ '{task_name}' —É–¥–∞–ª–µ–Ω–∞!")
    await callback.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω

@router.callback_query(F.data.startswith("complite_"))
async def delete_task(callback: CallbackQuery):
    task_name = callback.data.split("_", 1)[1]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π
    await callback.message.answer(f"üóë –ó–∞–¥–∞—á–∞ '{task_name}' –í—ã–ø–æ–ª–Ω–µ–Ω–∞!=!")
    await callback.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_handler(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫. –ò—Å–ø–æ–ª—å–∑—É–π /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.\n"
                         "–ª—É—á—à–µ –≤—Å–µ–≥–æ –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–∞—à –¥–∏–∞–ª–æ–≥ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ –º–æ–∂–µ—à—å –∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∑–∞–¥–∞—á—É.")
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start

# –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message(Command("help"))
async def help_handler(message: Message):
    await message.answer("üìå –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
                         "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
                         "/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
                         )


from datetime import datetime


def request_processing(result_trigger, promt, username):

    if result_trigger == "add":
        result = command_add(promt,username)
    elif result_trigger == "search":
        result = command_search(promt, username)
    else:
        result =f"(main)\n{result_trigger}"
        print(result_trigger)

    return result


@dp.message()
async def echo_message(message: Message):

    message_time = message.date.strftime("%Y-%m-%d %H:%M:%S")  # –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    promt = f"{message.text}|{message_time}"

    print(f"üì© {promt} ")

    result_trigger = Pauk(message.text)

    if result_trigger is not None:
        result = request_processing(result_trigger,promt,message.from_user.username)
        if isinstance(result, pd.DataFrame):
            for _, row in result.iterrows():
                task_name = row["task"]
                task_time = row["time"]

                # –°–æ–∑–¥–∞—ë–º –±–∏–ª–¥–µ—Ä–∞ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                builder = InlineKeyboardBuilder()

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
                builder.button(
                    text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                    callback_data=f"edit_{row['task']}"
                )
                builder.button(
                    text="üóë –£–¥–∞–ª–∏—Ç—å",
                    callback_data=f"delete_{row['task']}"
                )
                builder.button(
                    text="üëç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!",
                    callback_data=f"complite_{row['task']}"
                )

                # –°–æ–∑–¥–∞—ë–º InlineKeyboardMarkup –∏–∑ –±–∏–ª–¥–µ—Ä–∞
                inline_keyboard = builder.as_markup()

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                await message.answer(
                    f"üìù {task_name} ‚è∞ –í—Ä–µ–º—è: {task_time}",
                    reply_markup=inline_keyboard
                )
        else:
            await message.answer(result)

    else:
        print("None")
        gpt = client(get_—Åhat())
        result = gpt.chat(promt)
        await message.answer(result)




# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    await dp.start_polling(bot)

dp.include_router(router)

if __name__ == "__main__":
    asyncio.run(main())
