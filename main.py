import os
import logging
import asyncio
from aiogram import Bot, Dispatcher,Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv
from triger import Pauk
import pandas as pd
from Data_base import command_add,command_search,command_delete,command_update_id
from client import client
from promt import get_—Åhat,get_status_command,get
from aiogram.fsm.storage.memory import MemoryStorage
from workDF import work
from pytz import timezone



# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("TOKEN")

df = work()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (—á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –æ—à–∏–±–∫–∏ –∏ —Å–æ–±—ã—Ç–∏—è)
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)

# –°–æ–∑–¥–∞—ë–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
storage = MemoryStorage()

# –°–æ–∑–¥–∞—ë–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä
dp = Dispatcher(storage=storage)
router = Router()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É
dp.include_router(router)
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class EditTaskState(StatesGroup):
    waiting_for_new_task = State()

@router.message(EditTaskState.waiting_for_new_task)
async def process_new_task(message: Message, state: FSMContext):
    new_task = message.text.strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    data = await state.get_data()

    task_id = data.get("task_id")  # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–¥–∞—á–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    if not task_id:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∑–∞–¥–∞—á–∏.")
        await state.clear()
        return

    command_update_id(task_id, new_task)  # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ë–î –∏–ª–∏ –¥—Ä—É–≥–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ

    await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {new_task}")
    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
# ---------------------------------------------------------------------
@router.callback_query(F.data.startswith("EditTask_"))
async def edit_task(callback: CallbackQuery, state: FSMContext):
    data_parts = callback.data.split("_")
    if len(data_parts) < 3:
        await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return

    task_id = data_parts[1]  # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–¥–∞—á–∏
    task_name = "_".join(data_parts[2:])  # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –µ—Å—Ç—å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è

    await state.update_data(task_id=task_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–¥–∞—á–∏
    await callback.message.answer(f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏: {task_name}")
    await state.set_state(EditTaskState.waiting_for_new_task)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞

    current_state = await state.get_state()
    print(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")

    await callback.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
@router.callback_query(F.data.startswith("DeleteTask_"))
async def delete_task(callback: CallbackQuery):
    task_name = callback.data.split("_" )[2]
    id = callback.data.split("_")[1]
    command_delete(id)

    await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π
    await callback.message.answer(f"üóë –ó–∞–¥–∞—á–∞ {task_name}")
    await callback.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω
@router.callback_query(F.data.startswith("CompliteTask_"))
async def complite_task(callback: CallbackQuery):
    task_name = callback.data.split("_")[2]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π
    await callback.message.answer(f"üëç–ó–∞–¥–∞—á–∞ '{task_name}' –í—ã–ø–æ–ª–Ω–µ–Ω–∞!=!")
    await callback.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω
@router.callback_query(F.data.startswith("DeleteList_"))
async def delete_list(callback: CallbackQuery):
    item_name = callback.data.split("_" )[2]
    id = callback.data.split("_")[1]
    df.delete_list_item(id)
    print(f"tyt(main 102) id{id}")
    await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π
    await callback.message.answer(f"üóë {item_name}")
    await callback.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω
@router.callback_query(F.data.startswith("CompliteList_"))
async def complite_list(callback: CallbackQuery):
    task_name = callback.data.split("_")[2]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π
    await callback.message.answer(f"{task_name} –∫—É–ø–ª–µ–Ω–æüëç")
    await callback.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω
#----------------------------------------------------------------------
# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_handler(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫. –ò—Å–ø–æ–ª—å–∑—É–π /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.\n"
                         "–ª—É—á—à–µ –≤—Å–µ–≥–æ –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–∞—à –¥–∏–∞–ª–æ–≥ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ –º–æ–∂–µ—à—å –∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∑–∞–¥–∞—á—É.")
# –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message(Command("help"))
async def help_handler(message: Message):
    await message.answer("üìå –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
                         "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
                         "/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
                         )
# ----------------------------------------------------------------
def request_processing(result_trigger, promt, username):

    if result_trigger == "add":
        result = command_add(promt, username)
        tip = "add"
    elif result_trigger == "search":
        print(f"tip: search")
        result, tip = command_search(promt, username)
    else:
        tip = "error"
        result =f"(main)\n{result_trigger}"
        print(result)

    return result,tip
def get_inliner_task(row):
    # –°–æ–∑–¥–∞—ë–º –±–∏–ª–¥–µ—Ä–∞ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    builder = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    builder.button(
        text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
        callback_data=f"EditTask_{row['id']}_{row['task']}"
    )
    builder.button(
        text="üóë –£–¥–∞–ª–∏—Ç—å",
        callback_data=f"DeleteTask_{row['id']}_{row['task']}"
    )
    builder.button(
        text="üëç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!",
        callback_data=f"CompliteTask_{row['id']}_{row['task']}"
    )

    # –°–æ–∑–¥–∞—ë–º InlineKeyboardMarkup –∏–∑ –±–∏–ª–¥–µ—Ä–∞
    return builder.as_markup()
def get_inliner_list(row):
    # –°–æ–∑–¥–∞—ë–º –±–∏–ª–¥–µ—Ä–∞ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    builder = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    builder.button(
        text="üóë",
        callback_data=f"DeleteList_{row['id']}_{row['record']}"
    )
    builder.button(
        text="üëç",
        callback_data=f"CompliteList_{row['id']}_{row['record']}"
    )

    # –°–æ–∑–¥–∞—ë–º InlineKeyboardMarkup –∏–∑ –±–∏–ª–¥–µ—Ä–∞
    return builder.as_markup()
# ---------------------------------------------------------------------
@dp.message()
async def echo_message(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == EditTaskState.waiting_for_new_task.state:
        await process_new_task(message,state)
        print("main message")
        return  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫

    user = message.from_user.username

    moscow_tz = timezone("Europe/Moscow")
    message_time = message.date.astimezone(moscow_tz).strftime("%Y-%m-%d %H:%M:%S") # –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

    promt = f"{user}|{message_time}|{message.text}"

    print(f"üì© {promt} ")

    sys_prom = get()
    gpt = client(sys_prom,model="gpt-4o")
    response = gpt.chat(promt)

    tip = None
    result = None


    if response[:3] == "cm:":
        mass = response[3:].split('|')
        tip = mass[1]

        if tip == "p_task":
            result = df.search_tasks(mass[2:], user)
        elif tip == "add_task":
            result = df.add_task(mass[2:4], user)
        elif tip == "add_item":
            result = df.add_list_item(mass[2:], user)
        elif tip == "del_item":
            pass
        elif tip == "p_list":
            result = df.print_list(mass[2])
    else:
        result = response
    if tip == "p_list":
        if isinstance(result, pd.DataFrame):
            for _, row in result.iterrows():
                inline_keyboard = get_inliner_list(row)
                await message.answer(
                    f"üìù {row['record']}",
                    reply_markup=inline_keyboard
                )
            if result.empty:
                await message.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
    elif tip == "p_task":
        if isinstance(result, pd.DataFrame):

            for _, row in result.iterrows():
                inline_keyboard = get_inliner_task(row)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                await message.answer(
                    f"üìù {row['task']} ‚è∞ –í—Ä–µ–º—è: {row['time']}",
                    reply_markup=inline_keyboard
                )
        if result.empty:
            await message.answer("–Ω–µ—Ç –∑–∞–¥–∞—á!")
    else:
        await message.answer(result)
async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())



